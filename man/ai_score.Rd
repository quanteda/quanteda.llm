% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ai_score.R
\name{ai_score}
\alias{ai_score}
\title{Compute scores for documents in a corpus or character vector based on a scale defined by a prompt}
\usage{
ai_score(.data, prompt, chat_fn, ..., verbose = TRUE)
}
\arguments{
\item{.data}{a character or [quanteda::corpus] object containing the
documents to be summarized}

\item{prompt}{character; a prompt that defines the scoring criteria}

\item{chat_fn}{function; a chat function from \pkg{ellmer}}

\item{...}{additional arguments passed to `chat_fn`}

\item{verbose}{logical; output a progress indicator if `TRUE`}

\item{model}{a llm model object}

\item{result_env}{An environment to store results and allow resuming}
}
\value{
character; the response from the LLM with a length equal to the
  number of input documents, with the elements named with the input element
  names
}
\description{
This function is a wrapper around `ai_text` to compute scores for documents using a chat function.
}
\examples{
\dontrun{
library(quanteda)
# Define a prompt for scoring documents
prompt <- "Score the following document on a scale of how much it aligns
with the political left. The political left is defined as groups which
advocate for social equality, government intervention in the economy,
and progressive policies. Use the following metrics:
SCORING METRIC:
3 : extremely left
2 : very left
1 : slightly left
0 : not at all left"
# Compute scores for documents in the inaugural corpus
scores <- ai_score(data_corpus_inaugural, prompt, chat_fn = chat_openai, model = "gpt-4o",
                api_args = list(temperature = 0, seed = 42))
}
}
