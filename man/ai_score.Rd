% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ai_score.R
\name{ai_score}
\alias{ai_score}
\title{Scores documents in a corpus according to a defined scale}
\usage{
ai_score(.data, chat_fn, ..., scale, few_shot_examples = NULL, verbose = TRUE)
}
\arguments{
\item{.data}{a character or [quanteda::corpus] object containing the
documents to be scored}

\item{chat_fn}{function; a chat function from \pkg{ellmer}}

\item{...}{additional arguments passed to `chat_fn`}

\item{scale}{the defined scale question to generate a numeric answer - be as specific as possible}

\item{few_shot_examples}{a data frame with two columns: `text` and `score`, providing examples of how to score documents. This is optional but can help the model understand the scoring criteria better.}

\item{verbose}{logical; output a progress indicator if `TRUE`}

\item{model}{a llm model object}
}
\value{
character; the response from the LLM with a length equal to the
  number of input documents, with the elements named with the input element
  names
}
\description{
Use the llm model to score a set of documents.
The numerical scores for each text are added as an additional docvar to the input data
}
\examples{
\dontrun{
library(quanteda)
scale = "Score the following document on a scale of how much it aligns
           with the political left. The political left is defined as groups which 
           advocate for social equality, government intervention in the economy, 
           and progressive policies. Use the following metrics: 
           SCORING METRIC:
           1 : extremely left
           0 : not at all left"
score1 <- ai_score(data_corpus_inaugural[1:2], chat_fn = chat_ollama, model = "llama3.2", scale = scale)
score2 <- ai_score(data_char_ukimmig2010, chat_fn = chat_openai,
               api_args = list(temperature = 0, seed = 42), scale = scale)
}
}
