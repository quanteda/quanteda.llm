% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ai_text.R
\name{ai_text}
\alias{ai_text}
\title{Structured AI analysis of a character vector / docvar in a [quanteda::corpus]}
\usage{
ai_text(
  .data,
  chat_fn,
  ...,
  type_object,
  few_shot_examples = NULL,
  verbose = TRUE,
  checkpoint_file = "ai_text_results.RDS"
)
}
\arguments{
\item{.data}{A character vector of texts}

\item{chat_fn}{A function like `chat_openai()` from {ellmer}}

\item{...}{additional arguments passed to chat_fn}

\item{type_object}{A `type_object()` describing the expected structured output, see here for details:
https://ellmer.tidyverse.org/articles/structured-data.html}

\item{few_shot_examples}{Optional few-shot learning examples (data frame with `text`, `score`)}

\item{verbose}{Logical; whether to print progress}

\item{checkpoint_file}{A filename to save results after each call (enables resume), file is saved as RDS to working directory}
}
\value{
character; the response from the LLM with a length equal to the
  number of input documents; each single element defined by `type_object()` is added as a character vector
}
\description{
This function applies ai-assisted analysis to each document in a character vector or
a docvar in a [quanteda::corpus], using a structured type_object() to define the expected
response format. It supports few-shot learning examples for better performance.
}
\examples{
\dontrun{
library(quanteda)
library(quanteda.llm)
#pak::pak("quanteda/quanteda.tidy")
library(quanteda.tidy)
corpus <- quanteda::data_corpus_inaugural \%>\%
  mutate(llm_sum = ai_text(text, chat_fn = chat_openai, model = "gpt-4o",
                             api_args = list(temperature = 0, seed = 42),
                             type_object = type_object("Summary of the document",
                             summary = type_string("Summarize the document in a few sentences."),
                             checkpoint_file = "llm_sum.RDS")))
}
}
